import React, { useState, useRef, useEffect } from 'react';
import { FileText, Edit3, X, Check, Eye } from 'lucide-react';

interface ScriptSidebarProps {
  projectScript?: string;
  onScriptUpdate?: (script: string) => void;
  isProjectEmpty?: boolean;
}

const ScriptSidebar: React.FC<ScriptSidebarProps> = ({
  projectScript = '',
  onScriptUpdate,
  isProjectEmpty = true
}) => {
  const [script, setScript] = useState(projectScript);
  const [isEditing, setIsEditing] = useState(false);
  const [wordCount, setWordCount] = useState(0);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const [isProjectEmptyState, setIsProjectEmptyState] = useState(isProjectEmpty);

  // Update word count when script changes
  useEffect(() => {
    const words = script.trim().split(/\s+/).filter(word => word.length > 0);
    setWordCount(words.length);
  }, [script]);

  const handleSave = () => {
    if (onScriptUpdate) {
      onScriptUpdate(script);
    }
    setIsEditing(false);
  };

  const handleStartEditing = () => {
    setIsProjectEmptyState(false);
    setIsEditing(true);
    setTimeout(() => {
      textareaRef.current?.focus();
    }, 100);
  };

  const handleCancel = () => {
    setScript(projectScript);
    setIsEditing(false);
  };

  const handleClickToEdit = () => {
    if (!isEditing) {
      handleStartEditing();
    }
  };

  // Empty state
  if (isProjectEmptyState && !script.trim()) {
    return (
      <div className="bg-black border-r border-zinc-800 h-screen flex flex-col">
        <div className="flex-1 flex flex-col items-center justify-center p-6 text-center">
          <div className="w-16 h-16 bg-zinc-900 rounded-2xl flex items-center justify-center mb-4">
            <FileText className="w-8 h-8 text-zinc-400" />
          </div>
          
          <h3 className="text-sm font-medium text-white mb-3">
            No Instructions Yet
          </h3>
          
          <p className="text-xs text-zinc-400 mb-6 max-w-64 leading-relaxed">
            1. This script is generated by AI by analysing your prompts. It is used with every request as project context.  
          </p>
          <p className="text-xs text-zinc-400 mb-6 max-w-64 leading-relaxed">
            2. You can add special Instructions that video generation model should follow for consistency throughout the project.
          </p>

          <button
            onClick={handleStartEditing}
            className="px-4 py-2 bg-white text-black hover:bg-zinc-200 text-xs rounded-md flex items-center gap-2"
          >
            <Edit3 className="w-3 h-3" />
            Start Writing
          </button>
        </div>
      </div>
    );
  }

  // Main editor
  return (
    <div className="bg-black border-r border-zinc-800 h-screen flex flex-col">
      {/* Header */}
      <div className="p-3 border-b border-zinc-800">
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-2">
            <h2 className="text-base font-semibold text-white">Script</h2>
          </div>
          
          <div className="flex items-center gap-1">
            {isEditing ? (
              <>
                <button
                  onClick={handleCancel}
                  className="h-7 px-2 text-xs border border-zinc-700 text-zinc-400 hover:bg-zinc-800 hover:text-white rounded flex items-center gap-1"
                >
                  <X className="w-3 h-3" />
                  Cancel
                </button>
                <button
                  onClick={handleSave}
                  className="h-7 px-2 text-xs bg-green-600 hover:bg-green-700 text-white rounded flex items-center gap-1"
                >
                  <Check className="w-3 h-3" />
                  Save
                </button>
              </>
            ) : (
              <button
                onClick={handleStartEditing}
                className="h-7 px-2 text-xs border border-zinc-700 text-zinc-400 hover:bg-zinc-800 hover:text-white rounded flex items-center gap-1"
              >
                <Edit3 className="w-3 h-3" />
                Edit
              </button>
            )}
          </div>
        </div>
        
        <div className="flex items-center justify-between text-xs text-zinc-400">
          <div className="flex items-center gap-3">
            <span>{wordCount} tokens</span>
            <span>{script.length} characters</span>
          </div>
          
          {!isEditing && (
            <span className="text-zinc-500 text-[10px] flex items-center gap-1">
              <Eye className="w-3 h-3" />
              Read-only
            </span>
          )}
        </div>
      </div>

      {/* Editor Area */}
      <div className="flex-1 flex flex-col overflow-hidden">
        <div className="bg-zinc-900 border-b border-zinc-800 px-3 py-2">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="flex gap-1">
                <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              </div>
              <span className="text-xs text-zinc-400 ml-2">Project Script</span>
            </div>
            
            {!isEditing && (
              <div className="text-xs text-zinc-500">
                Click anywhere to edit
              </div>
            )}
          </div>
        </div>
        
        <div className="flex-1 relative bg-zinc-950 overflow-hidden">
          {/* Paper lines effect */}
          <div className="absolute inset-0 pointer-events-none">
            <div 
              className="w-full h-full opacity-5"
              style={{
                backgroundImage: 'repeating-linear-gradient(transparent, transparent 19px, #525252 20px)',
                backgroundSize: '100% 20px'
              }}
            />
            <div className="absolute left-12 top-0 bottom-0 w-px bg-zinc-700 opacity-20" />
          </div>
          
          {/* Click overlay for read-only mode */}
          {!isEditing && (
            <div
              onClick={handleClickToEdit}
              className="absolute inset-0 cursor-pointer z-10 group"
            >
              <div className="absolute inset-0 bg-black/5 opacity-0 group-hover:opacity-100 transition-opacity duration-200" />
              <div className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-white px-2 py-1 rounded text-xs flex items-center gap-1 bg-zinc-800">
                <Edit3 className="w-3 h-3" />
                Click to edit
              </div>
            </div>
          )}
          
          <textarea
            ref={textareaRef}
            value={script}
            onChange={(e) => setScript(e.target.value)}
            placeholder={isEditing ? "Start writing your script..." : "Click anywhere to start editing..."}
            readOnly={!isEditing}
            className={`w-full h-full resize-none bg-transparent text-white text-sm leading-5 p-4 pl-16 pr-4 border-none outline-none font-mono placeholder-zinc-600 ${
              !isEditing ? 'pointer-events-none' : 'cursor-text focus:ring-2 focus:ring-blue-500/20'
            }`}
            style={{ 
              lineHeight: '20px',
              fontFamily: 'ui-monospace, SFMono-Regular, "SF Mono", Menlo, Monaco, Consolas, monospace',
              zIndex: isEditing ? 20 : 1
            }}
          />
        </div>
      </div>
    </div>
  );
};

export default ScriptSidebar;